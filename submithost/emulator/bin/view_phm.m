%*************************************************************************
% matlab script: view_phm.m
%
% argument(s): workingdir_
%
% input(s): AZ_vol_dir_bed_int_final.phm, elevation.grid
%
% output(s): P.txt, SDP.txt, P.png, SDP.png
%
% Based on Keith Dalbey's script with
% updates from E. Ramona Stefanescu's script to display the elevation grid
%*************************************************************************

function view_phm(datadir_,workingdir_)

    %clear all;
    close all;
    
    %workingdir_ = '.';

    datadir = strcat(datadir_, '/');
    workingdir = strcat(workingdir_, '/');
    
    disp ('view_phm');

    % Note: material and camlight not implemented in Octave 4.0.0 
    % which is the version of Octave on vhub.
    % Update when Octave 6.3.0 is available on VHub
    OCTAVE_6 = 0;
    
    
    
    if (0)
    graphics_toolkit()
    available_graphics_toolkits()
    % Returning gnuplot
    % Need graphics_toolkit('gt');
    end
    
    % Note: currently only the gnuplot graphics toolkit is available 
    % https://trac.macports.org/ticket/58275, which returns
    % __gnuplot_draw_axes__: gnuplot (as of v4.2) only supports 3-D filled triangular patches
    % whening saving figures. 

    % Prepare the data
    
    disp('Preparing data...');
       
    % Pegasus needs input and output files named differently
    hazmapfilename = 'AZ_vol_dir_bed_int_final.phm';

    iftoc=1;
    if(iftoc)
        starttime = tic();
    end

    filename = strcat(datadir, hazmapfilename);
    fid=fopen(filename,'r');

    Nskip=sscanf(fgets(fid),'additional file format lines=%g',1);

    for i=1:Nskip
        fgets(fid);
    end
    %     fprintf(fid,'%%This file contains data for a Colima probability of hazard map generated by resampling a piecewise linear ensemble emulator constructed from titan simulations\n');
    %     fprintf(fid,'%%crith [m]: the critical flow depth in meters, a .phm file contains the data needed to plot a map of P(h(east,north)>crith): [1] double\n');
    %     fprintf(fid,'%%Ndiminmacro=4: number of uncertain dimensions (see what they are below) for each resample input: [1] integer\n');
    %     fprintf(fid,'%%W: total so far weight of all resamples (macro emulator inputs) used to make this file:  [1] double\n');
    %     fprintf(fid,'%%Nxmap: the number of (east,north) points on the map directly represented by this file: [1] integer\n');
    %     fprintf(fid,'%%[Nxmap] lines containing {{x=(east,north):[2] doubles},{{WI WI^2}: these are the sum of all w*indicator_function and w*indicator_function^2, you compute the probability of exceeding the critical height as P(h(east,north)>crith)=WI/W: [2] doubles}}\n');
    %     fprintf(fid,'%%Nresamp: number of resample inputs used so far to produce this .phm file: [1] integer\n');
    %     fprintf(fid,'%%[Nresamp] lines containing the {{resample macro-inputs: (log10(volume [m^3]),Direction [deg CC from east],BedFrictAng [deg],IntFrictAng [deg]): [Ndiminmacro] doubles},{w: weight of this resample macro-input: [1] double}}\n');

    crith=sscanf(fgets(fid),'%g',1); 
    Ndiminmacro=sscanf(fgets(fid),'%g',1);
    W=sscanf(fgets(fid),'%g',1); 
    Nxmap=sscanf(fgets(fid),'%g',1);

    XMAPWIWI2=fscanf(fid,'%g %g %g\n',[4 Nxmap])';

    Nresamp=sscanf(fgets(fid),'%g',1);

    XMACROw=fscanf(fid,sprintf('%%g%s\n',repmat(' %g',1,Ndiminmacro)),[Ndiminmacro+1 Nresamp])';
    fclose(fid);  

    EAST=XMAPWIWI2(:,1);
    NORTH=XMAPWIWI2(:,2);

    % For the P map
    P=XMAPWIWI2(:,3)/W;
    % For the (sigma P) / P map (sigma divided by P)
    SDP=sqrt((XMAPWIWI2(:,4)/Nresamp-XMAPWIWI2(:,3).^2/Nresamp^2)*(Nresamp^3/((Nresamp-1)*W^2))/Nresamp);

    izero=find(~SDP&~P);
    P(izero)=nan; SDP(izero)=nan;
    clear izero;

    minx=min(EAST);
    maxx=max(EAST);
    xminmax=[minx maxx];
    miny=min(NORTH);
    maxy=max(NORTH);
    yminmax=[miny maxy];

    % Diff calculates differences between adjacent elements.
    % Find finds first non-nozero (n=1) element
    NEAST=find(diff(NORTH),1); %so number in each group
    if(mod(Nxmap,NEAST))
        bob;
    end
    NNORTH=Nxmap/NEAST;
    EAST=reshape(EAST,NEAST,NNORTH);
    NORTH=reshape(NORTH,NEAST,NNORTH);

    P=reshape(P,NEAST,NNORTH);
    SDP=reshape(SDP,NEAST,NNORTH);

    % Write data to a text file    
    fid=fopen(strcat (workingdir,'P.txt'),'w');

    Pout = P;
    inan=find(isnan(Pout));
    Pout(inan)=0.0;
    fprintf(fid,'Nx=%d: X={%20.14g,%20.14g}\n',size(Pout,1),minx,maxx);
    fprintf(fid,'Ny=%d: Y={%20.14g,%20.14g}\n',size(Pout,2),miny,maxy);
    fprintf(fid,'P=\n');
    for iy=1:size(Pout,2)
        for ix=1:size(Pout,1)
           fprintf(fid,'%10.4g %10.4g %10.4g\n',...
              EAST(ix,iy),NORTH(ix,iy),Pout(ix,iy));
        end
    end
    fclose(fid);

    fid=fopen(strcat (workingdir,'SDP.txt'),'w');
    SDPout = SDP;
    inan=find(isnan(SDPout));
    SDPout(inan)=0.0;
    fprintf(fid,'Nx=%d: X={%20.14g,%20.14g}\n',size(SDPout,1),minx,maxx);
    fprintf(fid,'Ny=%d: Y={%20.14g,%20.14g}\n',size(SDPout,2),miny,maxy);
    fprintf(fid,'SDP=\n');
    for iy=1:size(SDPout,2)
        for ix=1:size(SDPout,1)
           fprintf(fid,'%10.4g %10.4g %10.4g\n',...
              EAST(ix,iy),NORTH(ix,iy),SDPout(ix,iy));
        end
    end
    fclose(fid);

    % Plot the ratio
    SDP=SDP./P;

    minP = min(P(:));
    maxP = max(P(:));
    minmaxp = [minP maxP];
    minSDP = min(SDP(:));
    maxSDP = max(SDP(:));
    minmaxsdp = [minSDP maxSDP];

    A = EAST;
    B = cat (3,A,NORTH);
    % P and SDP cannot be nan for interp below
    Pout = P;
    inan=find(isnan(Pout));
    Pout(inan)=0.0;
    C = cat (3,B,Pout);
    xyp = C;
    SDPout = SDP;
    inan=find(isnan(SDPout));
    SDPout(inan)=0.0;
    C = cat (3,B,SDPout);
    xysdp = C;

    clear Nxmap;
    clear XMAPWIWI2;
    clear XMACROw;
    clear EAST;
    clear NORTH;
    clear NEAST;
    clear NNORTH;
    clear A;
    clear B;
    clear C;
    clear P;
    clear SDP;
    clear Pout;
    clear SDPout;

    % Get the elevation grid
    
    filename = strcat(datadir, 'elevation.grid');
    XYZ=view_phm_read_in_zgrid(filename);
    X=XYZ(:,:,1); Y=XYZ(:,:,2); Z=XYZ(:,:,3);

    minx=min(XYZ(:,1,1)');
    maxx=max(XYZ(:,1,1)');
    xminmax=[minx maxx];
    miny=min(XYZ(1,:,2)');
    maxy=max(XYZ(1,:,2)');
    yminmax=[miny maxy];
    
    %minmaxz=[max(.1,min(min(Z))) max(max(Z))]
    minmaxz=[max(.1,min(Z(:))) max(Z(:))];
    iX=find((X(:,1)>=xminmax(1))&(X(:,1)<=xminmax(2)));
    iY=find((Y(1,:)>=yminmax(1))&(Y(1,:)<=yminmax(2)));
    X=X(iX,iY);
    Y=Y(iX,iY);
    Z=Z(iX,iY);
    Nx=size(X,1);
    Ny=size(X,2);
    Nquads=(Nx-1)*(Ny-1);
    
    % Interpolate 
    P=interp2(xyp(:,:,1)',xyp(:,:,2)',xyp(:,:,3)',X,Y,'linear');
    SDP=interp2(xysdp(:,:,1)',xysdp(:,:,2)',xysdp(:,:,3)',X,Y,'linear');

    clear XYZ;
    clear xyp;
    clear xysdp;
    
    iX=shiftdim([1:Nx-1]'*ones(1,Ny-1),-1);
    iY=shiftdim(ones(Nx-1,1)*[1:Ny-1],-1);
    quads=zeros(4,Nx-1,Ny-1);
    quads(1,:,:)=(iY-1)*Nx+iX;
    quads(2,:,:)=(iY-1)*Nx+iX+1;
    quads(3,:,:)=(iY-0)*Nx+iX+1;
    quads(4,:,:)=(iY-0)*Nx+iX;
    quads=reshape(quads,[4 Nquads]);
    clear iX;
    clear iY;

    % Two patches,
    % One for the elevation grid and one for the probability of hazard map (phm) data
    % https://docs.octave.org/latest/Graphics-Objects.html
    % gca - returns a handle to the current axes object
    % gcf - returns a handle to the current figure

    % Get the color maps
    cmaplength = 64;
    
    base_map = brighten(bone(cmaplength), .75);
    %default_map = brighten(flipud(hot(cmaplength)), .9);
    default_map = jet(cmaplength);

    % icolor for the elevation grid
    %icolor1=round((log10(Z)-log10(minmaxz(1)))/diff(log10(minmaxz))*cmaplength);
    numerator = Z-minmaxz(1);
    denominator = diff(minmaxz);
    icolor1=min(max(real(round((numerator/denominator)*cmaplength)),1),cmaplength);
    %unique(icolor1);
    icolor1(find(icolor1>cmaplength))=cmaplength;
    icolor1(find(icolor1<1))=1;
    
    % *** Image 1
                            
    disp ('Creating image 1 data ...');

    % Initialize the figure
    fig1 = figure('colormap', [base_map; default_map]);
    %disp (get(fig1, 'Position'));
    %set(fig1, 'Position', [680, 558, 560, 420]);
    %disp (get(fig1, 'Position'));
    set(fig1, 'visible', 'off');

    cmap = colormap;
    cmap(1:cmaplength, :);
    cmap1 = cmap(1:cmaplength, :);
    cmap2 = cmap(cmaplength+1:cmaplength*2, :);
    
    iPzero=find(~(P > 0.0));
    
    % cvert for the elevation grid
    cvert1 = cmap1(icolor1,:);
    % Makes the background very light
    %cvert1(iPzero,:) = 1;
    %unique(cvert1);
    %cvert1_reshaped = reshape(cvert1(quads,:),[size(quads),3]);
    
    %icolor=min(max(real(round((log10(P)-log10(minmaxp(1)))/diff(log10(minmaxp))*cmaplength)),1),cmaplength);
    numerator = log10(P)-log10(minmaxp(1));
    denominator = diff(log10(minmaxp));
    icolor2=min(max(real(round((numerator/denominator)*cmaplength)),1),cmaplength);
    
    icolor2(find(icolor2>cmaplength))=cmaplength;
    icolor2(find(icolor2<1))=1;
    cvert2=cmap2(icolor2,:);
    clear numerator;
    clear icolor2;
    cvert2(iPzero,:) = cvert1(iPzero,:);
    
    X_quads=X(quads);
    disp (size(X_quads));
    Y_quads=Y(quads);
    disp (size(Y_quads));
    Z_quads=Z(quads);
    disp (size(Z_quads));
    P_cvert2_reshaped = reshape(cvert2(quads,:),[size(quads),3]);
    disp (size(P_cvert2_reshaped));
    
    clear iPzero;
    clear cvert1;
    clear cvert2;

    %{
    %hold on
    %patch1 = patch(X(quads),Y(quads),Z(quads),cvert1_reshaped);
    %get(patch1); % to see properties Matlab
    %set (patch1, 'facecolor', 'flat') % default interp
    %set (patch1, 'facelighting', 'none'); % default flat
    % Note: default camlight color is white,
    % 'facelighting', 'none' is required for white to show in the patch
    patch2 = patch(X(quads),Y(quads),Z(quads),P_cvert2_reshaped);
    %set (patch2, 'facecolor', 'flat');
    %set (patch1, 'facelighting', 'none');
    %hold off
    shading flat;
    axis image;
    % Note: material and camlight not implemented in Octave 4.0.0 
    % which is the version of Octave on vhub.
    % Update when Octave 6.3.0 is available on VHub
    

    if (OCTAVE_6)
    material dull;
    hcl = camlight;
    end
    
    % All values in the colormap indexing array that are less than or equal 
    % to cmin map to the first row in the colormap. All values that are 
    % greater than or equal to cmax map to the last row in the colormap
    caxis(minmaxp);
    margin = .05
    set(gca,'XLim',[minx maxx],'YLim',[miny maxy])
    pos = get(gca, 'Position');
    set(gca, 'Position', [pos(1) pos(2)+margin pos(3) pos(4)-margin]);
    colormap(cmap2);
    % colorbar object
    c = colorbar();
    % get(c) to see properties
    %get (c)
    %if (MATLAB)
    %set (c, 'Limits', [0.0 1.0]);
    %end
    
    title(sprintf('P(h>%g [m])',crith),'fontsize',14);
    xlabel('East','fontsize',14);
    ylabel('North','fontsize',14);

    clear cvert1_reshaped;
    clear cvert2_reshaped;
    
    disp ('Saving image 1......');
    filename = strcat(workingdir, 'P.png');
    %print (fig1, filename, '-dpng', '-r300');
    %}

    % *** Image 2
                
    %%{
    disp ('Creating image 2 data...');

    % Initialize the figure
    fig2 = figure('colormap', [base_map; default_map]);
    %disp (get(fig2, 'Position'))
    set(fig2, 'visible', 'off');
    %image2 = newplot;

    cmap = colormap;
    cmap(1:cmaplength, :);
    cmap1 = cmap(1:cmaplength, :);
    cmap2 = cmap(cmaplength+1:cmaplength*2, :);
    
    iSDPzero=find(~(SDP > 0.0));
    
    % cvert for the elevation grid
    cvert1 = cmap1(icolor1,:);
    %cvert1(iSDPzero,:) = 1;
    %cvert1_reshaped = reshape(cvert1(quads,:),[size(quads),3]);
    
    %icolor=min(max(real(round((log10(SDP)-log10(minmaxsdp(1)))/diff(log10(minmaxsdp))*cmaplength)),1),cmaplength);
    numerator = log10(SDP)-log10(minmaxsdp(1));
    denominator = diff(log10(minmaxsdp));
    icolor2=min(max(real(round((numerator/denominator)*cmaplength)),1),cmaplength);
    
    icolor2(find(icolor2>cmaplength))=cmaplength;
    icolor2(find(icolor2<1))=1;
    cvert2=cmap2(icolor2,:);
    clear numerator;
    clear icolor2;
    cvert2(iSDPzero,:) = cvert1(iSDPzero,:);
    
    SDP_cvert2_reshaped = reshape(cvert2(quads,:),[size(quads),3]);
    disp (size(SDP_cvert2_reshaped));
    
    clear iSDPzero;
    clear cvert1;
    clear cvert2;

    filename = strcat(workingdir, 'view_phm_data.mat');
    save (filename, 'X_quads', 'Y_quads', 'Z_quads', 'P_cvert2_reshaped', 'SDP_cvert2_reshaped','-v7');

    %{
    %hold on
    %patch1 = patch(X(quads),Y(quads),Z(quads),cvert1_reshaped);
    %set (patch1, 'facecolor', 'flat') % default interp
    %set (patch1, 'facelighting', 'none'); % default flat
    % Note: default camlight color is white,
    % 'facelighting', 'none' is required for white to show in the patch
    patch2 = patch(X(quads),Y(quads),Z(quads),SDP_cvert2_reshaped);
    %set (patch2, 'facecolor', 'flat')
    %set (patch1, 'facelighting', 'none');
    %hold off
    shading flat;
    axis image;
    if (OCTAVE_6)
    material dull;
    hcl = camlight;
    end
    caxis(minmaxsdp);
    set(gca,'XLim',[minx maxx],'YLim',[miny maxy])
    pos = get(gca, 'Position');
    set(gca, 'Position', [pos(1) pos(2)+margin pos(3) pos(4)-margin]);
    colormap(cmap2);
    % colorbar object
    c = colorbar();
    % get(c) % to see properties
    %if (MATLAB)
    %set (c, 'Limits', [0.0 1.0]);
    %end
   
    %title('\sigma_P/P','fontsize',14);    
    % Latex symbols only work with graphics_toolkit('gnuplot');
    title('SD/P','fontsize',14);
    xlabel('East','fontsize',14);
    ylabel('North','fontsize',14);

    clear icolor1;
    clear cvert1_reshaped;
    clear cvert2_reshaped;
    
    clear P;
    clear SDP;
    clear quads;
    clear X;
    clear Y;
    clear Z;
    
    % gl2ps displays 
    % GL2PS info: OpenGL feedback buffer overflow.
    % From online reading, this message is displayed before 
    % the buffer sizes are increased.

    disp ('Saving image 2......');
    filename = strcat(workingdir, 'SDP.png');
    %saveas (fig2, filename, 'png');
    %print (fig2, filename, '-dpng', '-r300');
    %%}
    %}
    
    if(iftoc)
       stoptime = toc(starttime);
    end
    
    disp (stoptime);





